---
import { makeSafeQueryRunner, q } from "groqd";
import { sanityClient } from "sanity:client";
import { CARS_QUERY } from "../../sanity/lib/queries";
import { slugify } from "../../utils/createSlug";

export const prerender = true;

export async function getStaticPaths() {
  const query = q("*", { isArray: true })
    .filterByType("inventory")
    .grab$({
      data: q.object({
        transmission: q.string(),
        year: q.number(),
        name: q.string(),
        shortName: q.string(),
        drive: q.string(),
        seats: q.number(),
        doors: q.number(),
        fuelUsage: q.string(),
        shortFuelType: q.string(),
        fuelType: q.string(),
        description: q.string(),
        features: q.array(q.string()),
        safety: q.object({
          childSafetySeat: q.boolean(),
          pricePerWeek: q.string(),
        }),
        // guidelines: q.array(
        //   q.object({
        //     message: q.string(),
        //     _key: q.string(),
        //   })
        // ),
        pricePerWeek: q.number(),
        cc: q.number(),
      }),
      // name: q.string(),
    });
  const runQuery = makeSafeQueryRunner((query) => sanityClient.fetch(query));

  const data = await runQuery(query);
  console.log(data);

  const cars = await sanityClient.fetch(CARS_QUERY);
  // console.log(cars[0].data);
  const asStaticPath = cars.map((car: any) => {
    const slug = slugify(car);
    // console.log({ slug });
    return {
      params: { listing: slug },
      props: { listing: car },
    };
  });
  return asStaticPath;
}

// export async function getStaticPaths() {
//   const allListings = import.meta.glob("../../content/inventory/*.json");
//   const listingPaths = Object.keys(allListings);

//   const extractFileName = (filePath: string) =>
//     path.basename(filePath, path.extname(filePath));

//   const fileNames = listingPaths.map(extractFileName);

//   const asStaticPath = fileNames.map((fileName) => {
//     return {
//       params: { listing: fileName },
//     };
//   });

//   return asStaticPath;
// }

const { listing } = Astro.props;

// console.log({ listing });

const listingData = listing.data;

if (listingData === undefined) throw new Error("listingDetail is undefined");
---

<!-- <CarListingLayout listing={listingData} /> -->
